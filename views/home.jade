extends layout

block content
  header.jumbotron.subhead
    div.container
      h1 Danmarks Adressers Web API - DAWA
    div.container
      div.row
        div.span9
          section#intro
            div.page-header
              h2 Hvad er DAWA?
            p Danmarks Adressers Web API (DAWA) udstiller data og funktionalitet vedrørende Danmarks adresser, adgangsadresser, vejnavne samt postnumre. DAWA anvendes til at etablere adressefunktionalitet i it-systemer. Målgruppen for nærværende website er udviklere, som ønsker at indbygge adressefunktionalitet i deres it-systemer. DAWA er en del af <a href='http://aws.dk'>AWS Suiten</a>.

          section#anvendelser
            div.page-header
              h2 Hvad kan DAWA bruges til?
            p DAWA kan bruges til at etablere mange forskellige former for adressefunktionalitet i it-systemer. Det kan f.eks. være adresseindtastning, adressesøgning, adresseopslag, adressevask, adressevalidering eller etablering af en opdateret, lokal kopi af adressedata. Nedenfor kan du se en række eksempler på de forskellige funktionaliteter.

            h3 Adresseindtastning
            p Indtastning af adresser er et væsentligt element i mange applikationer.Det skal både være let for brugeren at indtaste en gyldig adresse og for udvikleren at implementere denne funktionalitet. DAWA er designet med dette for øje. Nedenfor vises en række eksempler til hvordan indtastning af adresser kan implementeres.
            p Autocomplete i forbindelse med adresseindtastning er en mekanisme til at forudsige, hvilken adresse brugeren ønsker at indtaste uden at brugeren behøver at taste hele adressen.
            form.form-horizontal
              fieldset
                legend Autocomplete af adresse
              div.control-group
                label.control-label(for='autocomplete-adresse') Adresse:
                div.controls
                  div.span4(style={position: 'relative'})
                    input.span4#autocomplete-adresse(type='text', autocomplete='off', placeholder='vejnavn husnr, etage. dør, postnummer')
              div.control-group
                label.control-label Valgt adresse:
                div.controls
                  div.span4
                    span#autocomplete-adresse-choice
              fieldset
                legend Autocomplete af adgangsadresse
              div.control-group
                label.control-label(for='autocomplete-adresse') Adgangsadresse:
                div.controls
                  div.span4(style={position: 'relative'})
                    input.span4#autocomplete-adgangsadresse(type='text', autocomplete='off', placeholder='vejnavn husnr, etage. dør, postnummer')
              div.control-group
                label.control-label Valgt adgangsadresse:
                div.controls
                  div.span4
                    span.help-block#autocomplete-adgangsadresse-choice
              fieldset
                legend Autocomplete af adresse i København
              div.control-group
                label.control-label(for='autocomplete-adresse') Adresse:
                div.controls
                  div.span4(style={position: 'relative'})
                    input.span4#autocomplete-adresse-kbh(type='text', autocomplete='off', placeholder='vejnavn husnr, etage. dør, postnummer')
              div.control-group
                label.control-label Valgt adresse:
                div.controls
                  div.span4
                    span#autocomplete-adresse-kbh-choice
            form
              fieldset
                legend Feltindtastning
                p Indtastning af en adresse kan også baseres på felter til hver enkel bestandel af adressen. De enkelte felter indeholder autocompletefunktionalitet. For hvert udfyldt felt indskrænkes udfaldsrummet for de efterfølgende feltet. Hvis du f.eks. indtaster 3450 Allerød, som postnummer, giver vejnavnefeltet dig kun mulighed for at vælge blandt vejnavne i postnummer 3450. Samme mekanisme gælder for husnummer, etage og dør.
                label(for='postnummer') Postnr
                input.span3(type='text', autocomplete='off', placeholder='postnummer', id='postnummer')
                label(for='vej') Vej
                input.span3(type='text', autocomplete='off', placeholder='vejnavn', id='vej')
                label(for='husnr') Husnr
                input.span3(type='text', autocomplete='off', placeholder='Husnummer', id='husnummer')
                label(for='etage') Etage
                input.span3(type='text', autocomplete='off', placeholder='Etage', id='etage')
                label(for='doer') Dør
                input.span3(type='text', autocomplete='off', placeholder='Dør', id='doer')

            legend Reverse geokoding
            p Det sidste eksempel på indtastning af en adresse er sådan set ikke en indtastning, men mere en udpegning. Brugeren præsenteres for et kort, hvorpå brugeren med et klik påkortet udpeger nærmeste adresse.
            p Klik på kortet nedenfor og få nærmeste adresse.

            div#map

            h3 Adressevask
            p Adresser bliver brugt i mange forskellige sammenhænge. Det kommer klart til udtryk i det store antal it-systemer, som rummer adresser. Adresserne er typisk blevet indtastet uden kontrol af adressens gyldighed og kan være ændret eller nedlagt efter indtastningen. Det resulterer i, at it-systemet med stor sandsynlighed rummer ugyldige adresser. Konsekvenserne kan være: Problemer med kundebesøg, postlevering, manuelt arbejde med at vedligeholde adresser og lignende. Det kan også resultere i, at man ikke kan anvende adresserne til at foretage analyser. Grundet de ufuldstændige adresseoplysninger kan man ikke kan slå adressen op i DAWA og derved skaffe yderligere oplysninger om adressen, som f.eks. adressens placering og tilknytningen til administrative inddelinger. Disse oplysninger kan anvendes til analyse af geografisk fordeling af ens kunder, placering i sogn og kommune, fordeling mellem land, by og sommerhuszone og andre anvendelige analyser. Det er kort sagt værdifuldt at have gyldige adresser i sit it-system.
            p DAWA tilbyder funktionalitet til at vaske adresser, som du kan anvende til at implementere adressevask i dit eget it-system.  Adressevask er en proces, hvor en ustruktureret adresse, som kan være ufuldstændig og indeholde stavefejl, oversættes til den korrekte, strukturerede, autoritative adresse.

            h3 Validering af adresser
            p DAWA kan også anvendes til validering af adresser. Hvis du f.eks. har dit eget adressekartotek, som du gerne vil sikre dig udelukkende indeholder gyldige adresser, kan du bruge DAWA.
            p Nedenfor kan du prøve, om du kan indtaste en gyldig adresse uden autocompletehjælp. Husk at der skelnes mellem små og store bogstaver.

              fieldset
                legend Adressevalidering

                label(for='vpostnummer') Postnr
                input.span3(type='text', placeholder='postnummer', id='vpostnummer')
                label(for='vvej') Vej
                input.span3(type='text', placeholder='vejnavn', id='vvej')
                label(for='vhusnr') Husnr
                input.span3(type='text', placeholder='Husnummer', id='vhusnummer')
                label(for='vetage') Etage
                input.span3(type='text', placeholder='Etage', id='vetage')
                label(for='vdoer') Dør
                input.span3(type='text', placeholder='Dør', id='vdoer')
                legend
                button.span1(id='valider') Valider
                label.span2(id='ervalideringok') Er adressen gyldig?

            h3 Adressedata
            p Hver enkel adresse er repræsenteret af en række oplysninger. Udover data om selve adressen: vejnavn, husnr, supplerende bynavn, postnummer, etage og dør, er der knyttet en lang række andre data til adressen. Her kan nævnes unik identifikation, placering (koordinater), ejerlav, matrikelnr, ejendomsnr samt tilknytning til administrative inddelinger: kommune, sogn, region, retskreds, politikreds og opstillingskreds.
            p Adressen kan på denne måde være indgang til andre områder, som f.eks. ejendomsområdet. Udfra en adresse kan du få fat i det tilknyttede ejensdomsnummer, som du så kan anvendes til opslag i ejendomssystemer efter ejendomsdata.

            h3 Adressesøgning
            p DAWA kan anvendes til at udvælge præcist de adresser, du er interesseret i. Det kan dreje sig om adresser i et enkelt sogn eller kommune. Det kan dreje som adresser indenfor en bestemt afstand til punkt. Eller adresser på en enkelt vej. Dawa giver mulighed for at udsøge adresser efter mange parametre og kombinationer af disse.

            h3 Download af adresser
            p Har du behov for at kunne arbejde med adressedata på din egen PC? Til at etablere din egen kopi af Danmarks Adresser? Til at lave en statistisk eller geografisk analyse baseret på adressedata? Til dette kan du bruge DAWA’s download funktionalitet. Her kan du downloade aktuelle data om adresser, adgangsadresser, vejnavne, postnumre, supplerende bynavne, kommuner, sogne, opstillingskredse, regioner, retskredse samt politikredse. Det er ikke nødvendigt at downloade alle data. Du kan nøjes med at udvælge præcist de data, du er interesseret i. Lad os se på nogle eksempler:

            pre
              a(href='#{url}/adresser?kommunekode=0326&format=csv') CSV fil med alle adresser i Kalundborg kommune

            pre
              a(href='#{url}/adresser?husnr=77&format=csv') CSV fil med alle adresser med husnummeret 77

            pre
              a(href='#{url}/adresser/?cirkel=12.5816211914972,55.681219613782,50&format=csv') CSV fil med de adresser, som ligger som har en afstand på mindre end 50 m til Gammel mønt 4, 1117 København K.

            pre
              a(href='#{url}/adresser?kommunekode=0101|0147&format=geojson') GeoJSON fil med København og Frederiksberg kommuners adresser.

            h3 Etablering af opdateret kopiadresseregister
            p Nogle har behov for at have en lokal, opdateret kopi af adressedata. DAWA kan anvendes til at etablere og holde kopien af adressedata opdateret. Til dette anvendes <a href='http://dawa.aws.dk/replikeringdok'>Replikerings API'et</a>.

          section#eksempler
            div.page-header
              h2 Hvordan bruges DAWA?
            p Dawa bruges af udviklere til at etablere adressefunktionalitet i it-systemer. DAWA kan anvendes fra et meget bredt udsnit af - for ikke at sige alle - platforme og udviklingssprog. DAWA tilgås via et web API, hvor man ved simple HTTP forespørgsler fra sit program kalder DAWA.
            p Hvis du f.eks. ønsker at finde alle adresser i Københavns kommune med husnummer 13 anvender du følgende URl fra dit program:
            pre
              a(href='#{url}/adresser?kommunekode=0101&husnr=13') #{url}/adresser?kommunekode=0101&husnr=13

            h4 Autocomplete af adresser
            p Hvordan implementerer du adresse autocomplete i din applikation? Hvis det er en web applikation er det enkelt. Til dette har vi lavet en komponent, som let kan integreres i din web applikation og etablere adresseindtastning med autocomplete. Find mere information på <a href="http://autocomplete.aws.dk">AWS Autocomplete komponentens web site</a>.
            p Hvis det ikke er en web applikation, som skal forsynes med adresse autocomplete, eller du af anden grund ikke kan anvende autocomplete komponenten, anbefaler vi dig at bruge autocomplete API'et, som skræddersyet til at implementere adresse autocomplete i hvilken som helst applikationstype. Læs mere på <a href='#{url}/autocompletedok'>Autocomplete API'et</a>.
            p Hvis du har helt specielle krav til hvordan autocomplete mekanismen er sammensat, kan du f.eks. anvende autocomplete på vejnavne, adgangsadresser og adresser til at sammen sætte din helt egen adresse autocomplete. Vi vil ikke anbefale det, men det kan gøre på følgende måde: Etablering af autocomplete af adresser baseres på en kæde af forespørgelser med tiltagende specifikhed. Først autocompletes på vejnavnet. Hvis brugeren for eks. har indtastet 'lill' anvendes følgende URL:
            pre
              a(href='#{url}/vejnavne/autocomplete?q=lill') #{url}/vejnavne/autocomplete?q=lill
            p Når brugeren har valgt det aktuelle vejnavn (eller har tastet nok til at identificere ét unikt vejnavn) overgår forespørgelser fra autocomplete på vejnavne til autocomplete på adgangsadresser. Lad os sige at brugeren har valgt Lilledal som vejnavn, og forsætter med indtastning af husnummer 23, så skal følgende URL bruges:
            pre
              a(href='#{url}/adgangsadresser/autocomplete?q=Lilledal 23') #{url}/adgangsadresser/autocomplete?q=Lilledal 23
            p Denne forespørgelse begrænser autocomplete-søgningen til søgning efter adgangsadresser der matcher "Lilledal 23". Det resultere i adgangsadressen "Lilledal 23, 3450 Allerød", som igen kan anvendes til at søge efter adresser, som denne adgangsadresse:
            pre
              a(href='#{url}/adresser/autocomplete?q=Lilledal 23, 3450 Allerød') #{url}/adresser/autocomplete?q=Lilledal 23, 3450 Allerød

            p Hvis din applikation kun er rettet mod adresser i f.eks. Københavns kommune, kan du i dine forespørgelser begrænse udsnittet af adresser og vejnavne, der kan autocompletes på til Københavns kommunes adresser. Det sker på følgende måde:
            pre
              a(href='#{url}/vejnavne/autocomplete?kommunekode=0101&q=rød') #{url}/vejnavne/autocomplete?kommunekode=0101&q=rød
            p og
            pre
              a(href='#{url}/adresser/autocomplete?kommunekode=0101&vejnavn=Rødkildevej&q=Rødkildevej 4') #{url}/adresser/autocomplete?kommunekode=0101&vejnavn=Rødkildevej&q=Rødkildevej 4

            h4 Feltindtastning af adresser
            p  Du kan se et eksempel på feltindtastning af adresser i
              a(href='#anvendelser') afsnittet om anvendelser.
            Feltindtastningen af adresser starter med autocomplete af adressens postnummer. Hvis f.eks. brugeren har indtastet 'aller' med henblik på at vælge postnummeret 3450 Allerød anvendes følgende forespørgelse:
            pre
              a(href='#{url}/postnumre/autocomplete?q=aller') #{url}/postnumre/autocomplete?q=aller
            p Når postnummeret er valgt går brugeren til indtastning af vejnavn, som er begrænset til de vejnavne, som er i postnummer 3450. Brugeren taster lilled for at vælge vejen Lilledal:
            pre
              a(href='#{url}/vejnavne/autocomplete?q=lilled&postnr=3450') #{url}/vejnavne/autocomplete?q=lilled&postnr=3450
            p Mulige husnumre for Lilledal i 3450 Allerød findes vha:
            pre
              a(href='#{url}/adgangsadresser?vejnavn=Lilledal&postnr=3450') #{url}/adgangsadresser?vejnavn=Lilledal&postnr=3450
            p Som anvendes til autocomplete af husnummeret.
            p Mulige etage angivelser findes på lignende vis:
            pre
              a(href='#{url}/adresser?vejnavn=Lilledal&husnr=23&postnr=3450') #{url}/adresser?vejnavn=Lilledal&husnr=23&postnr=3450
            p Det samme gælder for dørangivelsen:
            pre
              a(href='#{url}/adresser?vejnavn=Lilledal&husnr=23&etage=1&postnr=3450') #{url}/adresser?vejnavn=Lilledal&husnr=23&etage=1&postnr=3450
            p På denne måde styres brugeren til at angive en gyldig adresse.
            h4 Adressevalg baseret på reverse geokodning
            p Et eksempel på udpegning af en adresse baseret på reverse geokodning  kan prøves i
              a(href='#anvendelser') afsnittet om anvendelser.
            p Udpegningen af adressen foretages på kort, som resulterer i et koordinatsæt. Koordinatsæt anvendes til at finde nærmeste adresse på følgende måde:
            pre
              a(href='#{url}/adgangsadresser/reverse?x=12.59074&y=55.700677') #{url}/adgangsadresser/reverse?x=12.59074&y=55.700677

            h4 Adressevask
            p Adressevask i DAWA foregår på følgende måde: Lad os sige, at du har Geodatastyrelsen som kunde og har registreret ”Rante mester vej 8 st, 2400” som styrelsens adresse. For at vaske adressen bruges adressebetegnelsen som input til DAWA’s adressevaskservice:
            pre
              <a href='#{url}/datavask/adresser?betegnelse=Rante%20mester%20vej%208%20st,%202400'>#{url}/datavask/adresser?betegnelse=Rante mester vej 8 st, 2400</a>
            p Som resultat får man en række oplysninger om vasken. Den primære oplysning er, hvorvidt man har fået vasket adressen til en gyldig adresse. Kategorien informerer om vaskeresultatet. Kategori A betyder eksakt match, kategori B sikker match og kategori C usikker match. I vores eksempel drejer det sig om en kategori B, som betyder at vi har fundet adressen og får leveret den vaskede adresses bestanddele, som f.eks. unikt id, vejnavn, husnummer og postnummer. Derudover returneres en reference (en URL) til adressen i DAWA
            pre
              <a href='#{url}/adresser/0a3f50a0-4660-32b8-e044-0003ba298018'>#{url}/adresser/0a3f50a0-4660-32b8-e044-0003ba298018</a>
            p som kan anvendes til at hente en lang række andre data om adressen. Det drejer sig f.eks. om adressens placering, tilknytninger til f.eks. administrative inddelinger som sogn og retskreds, placering på jordstykke og selvfølgelig den korrekte adressebetegnelse, som er "Rentemestervej 8, st., 2400 København NV" - og ikke ”Rante mester vej 8 st, 2400”.

            p Du kan finde dokumentation for adressevask på <a href='#{url}/adressedok#datavask'>#{url}/adressedok#datavask</a> og for adgangsadressevask på <a href='#{url}/adgangsadressedok#datavask'>#{url}/adgangsadressedok#datavask</a>.

            h4 Adressevalidering.
            p Eksisterer adressen: Fægangen 1, 1. 13, 4180 Sorø? Det kan vi afgøre på følgende måde:
            pre
              a(href='#{url}/adresser?vejnavn=Fægangen&husnr=1&etage=1&dør=13&postnr=4180') #{url}/adresser?vejnavn=Fægangen&husnr=1&etage=1&dør=13&postnr=4180
            p Ovenstående forespørgelse resulterer i en liste med 1 adresse. Hvilket betyder at adressen eksisterer og er unik. Altså en gyldig adresse.

            h4 Download
            p Download af adresser følger samme mønster som ovenfor, nemlig ved at anvende simple HTTP forespørgsler til at specificere hvilke adresser, der ønskes downloadet.Ved download ønskes typisk data i csv- eller GeoJSON formattet. Lad os se på nogle eksempler:

            p Adresser i region Syddanmark:
            pre
              a(href='#{url}/adresser?regionskode=1083&format=csv') #{url}/adresser?regionskode=1083&format=csv

            p Adresser i Grøndal sogn:
            pre
              a(href='#{url}/adresser?sognekode=7060&format=geojson') #{url}/adresser?sognekode=7060&format=geojson
            <br>

          section#kodeeksempler
            div.page-header
              h2 Hvordan programmeres op mod DAWA?
            p Kommunikationen mellem klientprogrammet og DAWA foregår via HTTP protokollen. Klientapplitionen sender et GET request, hvor URL'en specificerer de ønskede data, og modtager efterfølgende et response med de ønskede data.
            p Hvordan dette gøres programmatisk afhænger af platform og programmeringssprog. Vi har for at gøre det lettere at komme i at programmere op mod DAWA lavet nogle programmeringseksempler baseret på forskellige platforme og programmeringssprog:
            ul
              li <em>C# og .NET</em>. Kodeeksemplet viser hvorledes man i C# programmere enkle opslag i DAWA, samt hvordan man vha. af streaming kan modtage en større datamængde uden at modtage det som et samlet hele. Du kan finde <a href='https://github.com/DanmarksAdresser/DawaDotnetClient'>C# kodeeksemplet i vort GitHub repositorie</a>.
              li <em>JavaScript og jQuery</em>. Kodeeksemplet er en lille mobil web applikation, <a href='http://dail.aws.dk'>Danmarks adresser i lommen</a>, som viser hvorledes DAWA kan kaldes fra JavaScript ved brug af jQuery. Du kan finde <a href='https://github.com/DanmarksAdresser/DanmarksAdresserILommen'>JavaScript kodeeksemplet i vort GitHub repositorie</a>.
            p Vi planlægger at tilføje kodeeksempler i andre sprog og platforme. Hvis du vil bidrage med et kodeeksempel i dit favorit programmeringssprog, er du meget velkommen.

block append scripts
  script(type='text/javascript').
    dawa.initForside()
